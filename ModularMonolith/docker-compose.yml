services:
  postgresql:
    container_name: monolith-postgresql
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=YourStrong@Passw0rd
      - POSTGRES_DB=TicketBuddy
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - ticketbuddy-monolith-network
  aspire-dashboard:
    container_name: monolith-aspire-dashboard
    image: mcr.microsoft.com/dotnet/aspire-dashboard:latest
    environment:
      - ASPIRE_DASHBOARD_UNSECURED_ALLOW_ANONYMOUS:true
    ports:
      - "18888:18888"
      - "4317:18889"
    depends_on:
      - postgresql
    networks:
      - ticketbuddy-monolith-network
  rabbitmq:
    container_name: rabbitmq
    image: masstransit/rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ticketbuddy-monolith-network
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    container_name: redis
    image: "redis:latest"
    ports:
    - "6379:6379"
    networks:
    - ticketbuddy-monolith-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  migrations:
    container_name: monolith-migrations
    build:
      context: .
      dockerfile: Host.Migrations/Dockerfile
    depends_on:
      postgresql:
        condition: service_started
    environment:
      - ENVIRONMENT=Development
    networks:
      - ticketbuddy-monolith-network
    restart: "no"
  api:
    container_name: monolith-api
    build:
      context: .
      dockerfile: Host/Dockerfile
    depends_on:
      migrations:
        condition: service_completed_successfully
      aspire-dashboard:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - ENVIRONMENT=Development
    ports:
      - "5000:8080"
      - "5001:8081"
    restart: on-failure
    networks:
      - ticketbuddy-monolith-network
  dataseeder:
    container_name: monolith-dataseeder
    build:
      context: .
      dockerfile: Host.DataSeeder/Dockerfile
    depends_on:
      api:
        condition: service_started
    environment:
      - ENVIRONMENT=Development
    networks:
      - ticketbuddy-monolith-network
    restart: "no"

volumes:
  postgresql_data:
  rabbitmq_data:
  
networks:
  ticketbuddy-monolith-network:
    name: ticketbuddy-monolith-network
    driver: bridge